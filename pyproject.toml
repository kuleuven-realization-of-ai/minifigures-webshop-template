[build-system]  # https://python-poetry.org/docs/pyproject/#poetry-and-pep-517
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]  # https://python-poetry.org/docs/pyproject/
name = "minifigures-app"
version = "0.0.0"
description = "The goal of this project is to teach the students everything they need to develop and deploy an AI solution from start to finish."
authors = ["Radix <ruben@radix.ai>"]
readme = "README.md"

[tool.poetry.dependencies]  # https://python-poetry.org/docs/dependency-specification/
coloredlogs = "^15.0.1"
dvc = "^2.40.0"
dvc-s3 = "^2.21.0"
fastapi = "^0.78.0"
gunicorn = "^20.1.0"
llvmlite = "^0.39.1"
numba = "^0.56.4"
onnxruntime = "^1.13.1"
opencv-python = "^4.7.0.68"
poethepoet = "^0.17.1"
pooch = "^1.6.0"
pymatting = "^1.1.8"
python = ">=3.10,<3.11"
python-multipart = "^0.0.5"
streamlit = "^1.16.0"
torch = {url = "https://download.pytorch.org/whl/cpu/torch-1.13.1%2Bcpu-cp310-cp310-linux_x86_64.whl"}
torchvision = {url = "https://download.pytorch.org/whl/cpu/torchvision-0.14.1%2Bcpu-cp310-cp310-linux_x86_64.whl"}
uvicorn = { extras = ["standard"], version = "^0.17.0" }

[tool.poetry.group.train.dependencies]  # https://python-poetry.org/docs/master/managing-dependencies/
albumentations = "^1.3.0"
matplotlib = "^3.6.2"
tensorboard = "^2.11.0"

[tool.poetry.group.test.dependencies]  # https://python-poetry.org/docs/master/managing-dependencies/
absolufy-imports = "^0.3.1"
black = { extras = ["jupyter"], version = "^22.12.0" }
coverage = { extras = ["toml"], version = "^7.0.3" }
mypy = "^0.991"
pre-commit = "^2.21.0"
pytest = "^7.2.0"
pytest-clarity = "^1.0.1"
pytest-mock = "^3.10.0"
pytest-xdist = "^3.1.0"
ruff = "^0.0.213"

[tool.poetry.group.dev.dependencies]
cruft = "^2.12.0"
jupyterlab = "^3.5.2"

[tool.black]  # https://black.readthedocs.io/en/stable/usage_and_configuration/the_basics.html#configuration-via-a-file
line-length = 100
target-version = ["py310"]

[tool.coverage.report]  # https://coverage.readthedocs.io/en/latest/config.html#report
precision = 1
show_missing = true
skip_covered = true

[tool.coverage.run]  # https://coverage.readthedocs.io/en/latest/config.html#run
branch = true
command_line = "--module pytest"
data_file = "reports/.coverage"
omit = ["src/minifigures_app"]
source = ["src"]

[tool.coverage.xml]  # https://coverage.readthedocs.io/en/latest/config.html#xml
output = "reports/coverage.xml"

[tool.mypy]  # https://mypy.readthedocs.io/en/latest/config_file.html
junit_xml = "reports/mypy.xml"
plugins = "pydantic.mypy"
ignore_missing_imports = true
pretty = true
show_column_numbers = true
show_error_codes = true
show_error_context = true
warn_unreachable = true

[tool.pytest.ini_options]  # https://docs.pytest.org/en/latest/reference/reference.html#ini-options-ref
addopts = "--color=yes --doctest-modules --exitfirst --failed-first --verbosity=2 --junitxml=reports/pytest.xml"
testpaths = ["src", "tests"]
xfail_strict = true

[tool.ruff]  # https://github.com/charliermarsh/ruff
fix = true
ignore-init-module-imports = true
line-length = 100
select = ["A", "B", "C4", "C90", "D", "DTZ", "E", "F", "I", "ISC", "N", "PGH", "PLC", "PLE", "PLR", "PLW", "PT", "RET", "RUF", "SIM", "TID", "UP", "W", "YTT"]
ignore = ["A003", "E501", "PGH001", "PGH002", "PGH003", "RET504", "S101", "UP007"]
extend-ignore = ["D107", "D203", "D212", "D213", "D402", "D413", "D415", "D416", "D417"]
unfixable = ["F401", "F841"]
src = ["src", "tests"]
target-version = "py310"

[tool.poe.tasks]  # https://github.com/nat-n/poethepoet

  [tool.poe.tasks.api]
  help = "Run the REST API"
  shell = """
    if [ $dev ]
    then {
      uvicorn \
        --host $host \
        --port $port \
        --reload \
        minifigures_api.api:app
    } else {
    gunicorn \
      --access-logfile - \
      --bind $host:$port \
      --graceful-timeout 10 \
      --keep-alive 10 \
      --log-file - \
      --timeout 30 \
      --worker-class uvicorn.workers.UvicornWorker \
      --worker-tmp-dir /dev/shm \
      --workers 2 \
      minifigures_api.api:app
    } fi
    """

    [[tool.poe.tasks.api.args]]
    help = "Bind socket to this host (default: 0.0.0.0)"
    name = "host"
    options = ["--host"]
    default = "0.0.0.0"

    [[tool.poe.tasks.api.args]]
    help = "Bind socket to this port (default: 8000)"
    name = "port"
    options = ["--port"]
    default = "8000"

    [[tool.poe.tasks.api.args]]
    help = "Run in development mode"
    type = "boolean"
    name = "dev"
    options = ["--dev"]

  [tool.poe.tasks.app]
  help = "Serve the Streamlit application"
  cmd = """
    streamlit run
      --browser.gatherUsageStats false
      --server.address $host
      --server.port $port
      --theme.base light
      src/minifigures_app/🏠_Home.py
    """
  use_exec = true

    [[tool.poe.tasks.app.args]]
    help = "Bind socket to this host (default: 0.0.0.0)"
    name = "host"
    options = ["--host"]
    default = "0.0.0.0"

    [[tool.poe.tasks.app.args]]
    help = "Bind socket to this port (default: 8500)"
    name = "port"
    options = ["--port"]
    default = "8500"

  [tool.poe.tasks.lint]
  help = "Lint this package"

    [[tool.poe.tasks.lint.sequence]]
    cmd = """
      pre-commit run
        --all-files
        --color always
      """

  [tool.poe.tasks.test]
  help = "Test this package"

    [[tool.poe.tasks.test.sequence]]
    cmd = "coverage run"

    [[tool.poe.tasks.test.sequence]]
    cmd = "coverage report"

    [[tool.poe.tasks.test.sequence]]
    cmd = "coverage xml"
